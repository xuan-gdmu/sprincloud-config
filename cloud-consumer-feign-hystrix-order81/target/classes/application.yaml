server:
  port: 81


eureka:
  client:
    register-with-eureka: true    #表识不向注册中心注册自己
    fetch-registry: true   #表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka/


spring:
  application:
    name: cloud-provider-order-hystrix


feign:
  ### Hystrix 配置
  hystrix:
    enabled: true #如果处理自身的容错就开启。开启方式与生产端不一样。
hystrix:
  command:
    default:
      circuitBreaker:
        # 当在配置时间窗口内达到此数量的失败后，进行短路。默认20个
        requestVolumeThreshold: 1
        # 触发短路的时间值，当该值设为5000时，则当触发 circuit break 后的5000毫秒内都会拒绝request
        # 也就是5000毫秒后才会关闭circuit。默认5000
        sleepWindowInMilliseconds: 1500
        # 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false
        forceOpen: false
        # 强制关闭熔断器 如果这个开关打开，circuit将一直关闭且忽略，默认false
        forceClosed: false
      execution:
        isolation:
          thread:
            # 熔断器超时时间，默认：1000/毫秒
            timeoutInMilliseconds: 10000
        #还可以设置具体方法的超时时间等等
        #由于底层使用的是ribbon,所有也要注意ribbon的超时时间
ribbon: #根
  ReadTimeout:  10000
  ConnectTimeout: 10000

